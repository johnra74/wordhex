/// <reference lib="webworker" />

const validWordList: string = atob('');

let puzzleKey: string;

interface Command {
  type: string;
  payload: string;
}

interface Result {
  isSuccess: boolean;
  isNaW: boolean;
  hints: number[];
}

addEventListener('message', (event) => {
  let cmd:Command = event.data as Command;
  
  switch (cmd.type) {
    case 'seed':
      let num = Number(cmd.payload);
      puzzleKey = validWordList.substring(((num - 1) * 7) + 1, num * 7);  
      break;
  
    case 'isValidWord':      
      const guess: string = cmd.payload.toLowerCase();      
      if (validWordList.indexOf(guess) > -1) {
        // is valid word
        postMessage(match(guess));      
      } else {
        postMessage({isNaW: true} as Result)        
      }
      break;
      
    default:
      console.log('unexpected error on worker!');
      break;
  }
});

function match(guess:string) : Result {
  let result:Result;
  if (guess === puzzleKey) {
    // is valid word
    result = { isSuccess: true } as Result;        
  } else {
    result = {
      isSuccess: false,
      hints: getHints(guess)
    } as Result;
  }

  return result;
}

function getHints(guess:string) : number[] {
  let hints:number[] = [];
  let map:Map<string, boolean> = new Map<string, boolean>();

  for (let idx = 0; idx < 6; idx++) {
    let key:string = guess.substring(idx, idx+1);
    if ( key === puzzleKey.substring(idx,idx+1)) {
      hints.push(1);
    } else {
      if (puzzleKey.indexOf(key) >= 0 && !map.has(key)) {
        map.set(key, true);
        hints.push(2);
      } else {        
        hints.push(3);
      }
    }
    
  }
  return hints;
}
